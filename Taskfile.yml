version: '3'

dotenv: ['.env', '.env.local']

includes:
  tools:
    taskfile: ./tools.Taskfile.yml
  bindings/go/credentials:
    optional: true
    taskfile: ./bindings/go/credentials/Taskfile.yml
    dir: ./bindings/go/credentials
  bindings/go/constructor:
    optional: true
    taskfile: ./bindings/go/constructor/Taskfile.yml
    dir: ./bindings/go/constructor
  bindings/go/input/file:
    optional: true
    taskfile: ./bindings/go/input/file/Taskfile.yml
    dir: ./bindings/go/input/file
  bindings/go/descriptor/v2:
    optional: true
    taskfile: ./bindings/go/descriptor/v2/Taskfile.yml
    dir: ./bindings/go/descriptor/v2
  bindings/go/descriptor/normalisation:
    optional: true
    taskfile: ./bindings/go/descriptor/normalisation/Taskfile.yml
    dir: ./bindings/go/descriptor/normalisation
  bindings/go/descriptor/runtime:
    optional: true
    taskfile: ./bindings/go/descriptor/runtime/Taskfile.yml
    dir: ./bindings/go/descriptor/runtime
  bindings/go/runtime:
    optional: true
    taskfile: ./bindings/go/runtime/Taskfile.yml
    dir: ./bindings/go/runtime
  bindings/go/generator:
    optional: true
    taskfile: ./bindings/go/generator/Taskfile.yml
    dir: ./bindings/go/generator
  bindings/go/blob:
    optional: true
    taskfile: ./bindings/go/blob/Taskfile.yml
    dir: ./bindings/go/blob
  bindings/go/ctf:
    optional: true
    taskfile: ./bindings/go/ctf/Taskfile.yml
    dir: ./bindings/go/ctf
  bindings/go/oci:
    optional: true
    taskfile: ./bindings/go/oci/Taskfile.yml
    dir: ./bindings/go/oci
  bindings/go/oci/integration:
    optional: true
    taskfile: ./bindings/go/oci/integration/Taskfile.yml
    dir: ./bindings/go/oci/integration
  bindings/go/dag:
    optional: true
    taskfile: ./bindings/go/dag/Taskfile.yml
    dir: ./bindings/go/dag
  bindings/go/plugin:
    optional: true
    taskfile: ./bindings/go/plugin/Taskfile.yml
    dir: ./bindings/go/plugin
  bindings/go/configuration:
    optional: true
    taskfile: ./bindings/go/configuration/Taskfile.yml
    dir: ./bindings/go/configuration
  cli:
    optional: true
    taskfile: ./cli/Taskfile.yml
    dir: ./cli

vars:
  GO_MODULES:
    sh: find {{ .ROOT_DIR }} -name go.mod -exec dirname {} \; | sed 's|{{ .ROOT_DIR }}/||'


tasks:
  default:
    deps: ["cli:build"]

  go_modules:
    desc: "List all Go Modules available in this project"
    cmd: echo "{{ .GO_MODULES }}"
    silent: true

  test:
    desc: "Run all tests in the project"
    vars:
      TASKS:
        sh: "task -aj | jq -r '.tasks[] | select(.name | endswith(\":test\")) | .name | rtrimstr(\":test\")'"
    cmds:
      - for: { var: TASKS }
        task: '{{.ITEM}}:test'
  test/integration:
    desc: "Run all integration tests in the project, possibly requiring external systems"
    vars:
      TASKS:
        sh: "task -aj | jq -r '.tasks[] | select(.name | endswith(\":test/integration\")) | .name | rtrimstr(\":test/integration\")'"
    cmds:
      - for: { var: TASKS }
        task: '{{.ITEM}}:test/integration'

  init/go.work:
    desc: "Initialize the workspace environment"
    status:
      - find go.work
    cmds:
      - go work init
      - for: { var: GO_MODULES }
        cmd: 'go work use {{.ITEM}}'
      - go work sync

  generate:
    desc: "Run all Code Generators in the project"
    cmds:
      - task: 'bindings/go/generator:ocmtypegen/generate'
      - task: 'tools:deepcopy-gen/generate-deepcopy'
      - task: 'cli:generate/docs'
        vars:
          CLI_DOCUMENTATION_MODE: "hugo"
          CLI_DOCUMENTATION_DIRECTORY: '{{ .ROOT_DIR }}/docs/reference/cli'
