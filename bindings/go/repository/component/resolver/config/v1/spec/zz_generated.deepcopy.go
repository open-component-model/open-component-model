//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by deepcopy-gen-v0.32. DO NOT EDIT.

package spec

import (
	runtime "ocm.software/open-component-model/bindings/go/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Config) DeepCopyInto(out *Config) {
	*out = *in
	out.Type = in.Type
	if in.Aliases != nil {
		in, out := &in.Aliases, &out.Aliases
		*out = make(map[string]*runtime.Raw, len(*in))
		for key, val := range *in {
			var outVal *runtime.Raw
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(runtime.Raw)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.Resolvers != nil {
		in, out := &in.Resolvers, &out.Resolvers
		*out = make([]*Resolver, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(Resolver)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Config.
func (in *Config) DeepCopy() *Config {
	if in == nil {
		return nil
	}
	out := new(Config)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyTyped is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Typed.
func (in *Config) DeepCopyTyped() runtime.Typed {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Resolver) DeepCopyInto(out *Resolver) {
	*out = *in
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		*out = new(runtime.Raw)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Resolver.
func (in *Resolver) DeepCopy() *Resolver {
	if in == nil {
		return nil
	}
	out := new(Resolver)
	in.DeepCopyInto(out)
	return out
}
