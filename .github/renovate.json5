{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'config:best-practices',
    'docker:pinDigests',
    'group:kubernetes',
    'group:goOpenapi',
    'helpers:pinGitHubActionDigests',
    'security:openssf-scorecard',
    ':dependencyDashboard',
    ':rebaseStalePrs',
  ],
  'git-submodules': {
    enabled: true,
  },
  'schedule': [
    '* * * * 0' // At every minute on Sunday it is allowed to created branches
  ],
  'updateNotScheduled': true, // Update branches that have already been created
  'minimumReleaseAge': '28 days',
  'branchPrefix': 'renovate/',
  'gitAuthor': 'ocmbot[bot] <125909804+ocmbot[bot]@users.noreply.github.com>',
  'gitIgnoredAuthors': [
    '125909804+ocmbot[bot]@users.noreply.github.com',
  ],
  prConcurrentLimit: 0,
  prHourlyLimit: 0,
  automerge: true,
  automergeType: "pr",
  separateMinorPatch: true,
  separateMultipleMajor: true,
  packageRules: [
    {
      matchManagers: [
        'gomod',
        'custom.regex',
      ],
      matchPackageNames: [
        'sigs.k8s.io/controller-runtime',
        'sigs.k8s.io/controller-tools',
        'k8s.io/*',
        'envtest',
      ],
      groupName: 'Kubernetes dependencies',
      groupSlug: 'kubernetes-deps',
    },
    {
      groupName: 'Docker dependencies',
      groupSlug: 'docker-deps',
      matchPackageNames: [
        'github.com/docker/{/,}**',
      ],
    },
    {
      groupName: 'Golang X Repositories',
      groupSlug: 'golang-x-repos',
      matchPackageNames: [
        'golang.org/x/{/,}**'
      ]
    },
    {
      groupName: 'Google Golang Repositories',
      groupSlug: 'google-golang-repos',
      matchPackageNames: [
        'google.golang.org/{/,}**'
      ]
    },
    {
      groupName: 'Sigstore Repositories',
      groupSlug: 'sigstore',
      matchPackageNames: [
        'github.com/sigstore/{/,}**'
      ]
    },
    {
      groupName: 'spf13 repositories',
      groupSlug: 'spf13',
      matchPackageNames: [
        'github.com/spf13/{/,}**'
      ]
    },
    {
      matchCategories: [
        'golang',
      ],
      postUpdateOptions: [
        'gomodTidy',
      ],
      enabled: true,
    },
    {
      matchManagers: [
        'gomod',
      ],
      matchDepTypes: [
        'indirect',
      ],
      matchUpdateTypes: [
        'major',
      ],
      enabled: false,
    },
    {
      matchManagers: [
        'gomod',
      ],
      groupName: 'OCM Monorepo Go Module Dependencies',
      groupSlug: 'ocm-monorepo',
      matchPackageNames: [
        'ocm.software/open-component-model/**',
      ],
    },
  ],
  customDatasources: {
    envtest: {
      defaultRegistryUrlTemplate: 'https://raw.githubusercontent.com/kubernetes-sigs/controller-tools/master/envtest-releases.yaml',
      format: 'yaml',
      transformTemplates: [
        '{ "releases": $map($distinct($keys($.releases)), function($v){ {"version": $replace($v, /^v/, "")} }) }',
      ],
    },
  },
  customManagers: [
    {
      customType: 'regex',
      managerFilePatterns: [
        '/(^|/)\\.env(\\.local)?$/',
      ],
      matchStrings: [
        '# renovate: datasource=custom.envtest depName=envtest\\s+ENVTEST_K8S_VERSION=v?(?<currentValue>\\d+\\.\\d+\\.\\d+)',
      ],
      datasourceTemplate: 'custom.envtest',
      depNameTemplate: 'envtest',
      versioningTemplate: 'semver',
    },
    {
      customType: 'regex',
      managerFilePatterns: [
        '/(^|/)\\.env(\\.local)?$/',
      ],
      matchStrings: [
        '# renovate: datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)\\s+.*?_VERSION=v?(?<currentValue>\\d+\\.\\d+\\.\\d+)',
      ],
      versioningTemplate: 'semver',
    },
  ],
  postUpgradeTasks: {
    commands: [
      'command -v go >/dev/null 2>&1 || exit 0; find . -name "go.mod" -type f -path \'*/integration/*\' -exec dirname {} \\; | while read dir; do echo "Running explicit go mod tidy for integration test in $dir"; cd "$dir" && go mod tidy && cd - > /dev/null; done',
    ],
    fileFilters: [
      '**/go.mod',
      '**/go.sum',
    ],
    executionMode: 'branch',
  },
}
