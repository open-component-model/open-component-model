name: CI

on:
  pull_request:
  push:
    branches:
    - main

env:
  DIR: bindings/go

jobs:
  discover_modules:
    name: "Discover Go Modules"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      # useful for working directly with modules
      modules_json: ${{ steps.discover.outputs.modules_json }}
      # should be used in conjunction with codeql
      projects_json: ${{ steps.discover.outputs.modules_json }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover Go Modules
        id: discover
        run: |
          MODULES="$(find ${{ env.DIR }} -name "go.mod" -exec dirname {} \;)"
          MODULES_JSON=$(echo "$MODULES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          PROJECTS_JSON=$(echo "$MODULES" | jq -R -s -c 'split("\n") | map(select(. != "")) | map({path: .})')
          FILTERS="$(echo "$MODULES" | jq -rR -s -c 'split("\n") | map(select(. != "")) | map("\(.):\n - \"\(sub("^";""))/**\"") | join ("\n")')"
          
          echo "Detected modules: $MODULES"
          echo "Generated modules JSON: $MODULES_JSON"
          echo "Generated projects JSON: $PROJECTS_JSON"
          echo "Generated filters\n: $FILTERS"
          
          echo "modules_json=$MODULES_JSON" >> $GITHUB_OUTPUT 
          echo "projects_json=$PROJECTS_JSON" >> $GITHUB_OUTPUT
          
          {
            echo 'filters<<EOF'
            echo "$FILTERS"
            echo EOF
          } >> $GITHUB_ENV

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: ${{ env.filters }}

  golangci_lint:
    name: "golangci-lint"
    needs: discover_modules
    runs-on: large_runner
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow write access to checks to allow the action to annotate code in the PR.
      checks: write
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - name: Self Hosted Runner Post Job Cleanup Action
        uses: TooMuch4U/actions-clean@v2.2
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.DIR }}/${{ matrix.module }}/**/*
            .github/config/golangci.yml
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version-file: '${{ github.workspace }}/${{ env.DIR }}/${{ matrix.module }}/go.mod'
      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ github.workspace }}/${{ env.DIR }}/${{ matrix.module }}
          args: --timeout 10m --config=${{ github.workspace }}/.github/config/golangci.yml --issues-exit-code=0
  run_unit_tests:
    name: "Unit Tests"
    needs: discover_modules
    runs-on: large_runner
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - name: Self Hosted Runner Post Job Cleanup Action
        uses: TooMuch4U/actions-clean@v2.2

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.DIR }}/${{ matrix.module }}/**/*
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version-file: '${{ github.workspace }}/${{ env.DIR }}/${{ matrix.module }}/go.mod'
      - name: Run Tests
        run: task bindings/go/${{ matrix.module }}:test
  analyze-go:
    name: "Analyze Go Modules"
    needs: discover_modules
    runs-on: large_runner
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.discover_modules.outputs.projects_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ matrix.project.path }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"