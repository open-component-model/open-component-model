name: CI

on:
  pull_request:
  push:
    branches:
    - main

env:
  # Check Only Changed Modules
  # If true, only changed modules will be analyzed.
  # If false, all discovered modules will be analyzed.
  check_only_changed: ${{ github.event_name == 'pull_request' }}

jobs:
  discover_modules:
    name: "Discover Go Modules"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      # useful for working directly with modules
      modules_json: ${{ steps.filtered.outputs.modules_json }}
      integration_test_modules_json: ${{ steps.filtered_test.outputs.integration_test_modules_json }}
      unit_test_modules_json: ${{ steps.filtered_test.outputs.unit_test_modules_json }}
    env:
      DIR: ${{ github.workspace }}
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Discover Go Modules
        id: discover
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Get all Go modules using task
            const modulesOutput = execSync('task go_modules', { encoding: 'utf-8' });
            const modules = modulesOutput.split('\n').filter(Boolean);
            
            // Generate filters for paths-filter
            const filters = modules.map(module => {
              const lines = [`${module}:`];
              
              // Add the module's own path
              lines.push(` - "${module}/**"`);
              
              // If this is an integration module, add its parent module path
              if (module.includes('/integration')) {
                const parentModule = module.split('/integration')[0];
                lines.push(` - "${parentModule}/**"`);
                console.log(`🔍 Detected integration test module: ${module}`);
                console.log(`   └─ Linked to parent module: ${parentModule}`);
              }
              
              return lines.join('\n');
            }).join('\n');
            
            // Set outputs
            core.setOutput('modules_json', JSON.stringify(modules));
            core.setOutput('filters', filters);
            
            // Log for debugging
            console.log('📦 Detected modules:', modules);
            console.log('🎯 Generated filters:', filters);
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: changes
        with:
          filters: ${{ steps.discover.outputs.filters }}
      - name: Filter JSONs Based on Changes
        id: filtered
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          MODULES_JSON: ${{ steps.discover.outputs.modules_json }}
          CHANGE_JSON: ${{ steps.changes.outputs.changes }}
        with:
          script: |
            const modulesJson = JSON.parse(process.env.MODULES_JSON || '[]');
            const changeJson = JSON.parse(process.env.CHANGE_JSON || '[]');
            
            if (process.env.check_only_changed === "true") {
              console.log(`Filtering modules based on changes: ${JSON.stringify(changeJson)}`);
              const filteredModules = modulesJson.filter(module => {
                return changeJson.some(change => change.includes(module));
              });
              console.log(`Filtered modules: ${JSON.stringify(filteredModules)}`);
              core.setOutput("modules_json", JSON.stringify(filteredModules));
            } else {
              console.log("check_only_changed is false, no filtering applied.");
              core.setOutput("modules_json", JSON.stringify(modulesJson));
            }
      - name: Filter based on Testability
        id: filtered_test
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          MODULES_JSON: ${{ steps.filtered.outputs.modules_json }}
        with:
          script: |
            const { execSync } = require('child_process');
            const modules = JSON.parse(process.env.MODULES_JSON || '[]');
            
            const unitTestModules = [];
            const integrationTestModules = [];

            for (const module of modules) {
              try {
                const output = execSync(`task -d ${module} -aj`, { encoding: 'utf-8' });
                const parsed = JSON.parse(output);
                const taskNames = parsed.tasks.map(task => task.name);

                if (taskNames.includes('test')) {
                  unitTestModules.push(module);
                }
                if (taskNames.includes('test/integration')) {
                  integrationTestModules.push(module);
                }
              } catch (error) {
                console.log(`Skipping module '${module}' due to error or no taskfile: ${error.message}`);
              }
            }

            console.log(`Unit test modules: ${JSON.stringify(unitTestModules)}`);
            console.log(`Integration test modules: ${JSON.stringify(integrationTestModules)}`);
            
            core.setOutput('unit_test_modules_json', JSON.stringify(unitTestModules));
            core.setOutput('integration_test_modules_json', JSON.stringify(integrationTestModules));
      - name: Generate Job Summary
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const modules = JSON.parse(`${{ steps.discover.outputs.modules_json || '[]' }}`);
            const filtered = JSON.parse(`${{ steps.filtered.outputs.modules_json || '[]' }}`);
            const unitTests = JSON.parse(`${{ steps.filtered_test.outputs.unit_test_modules_json || '[]' }}`);
            const integrationTests = JSON.parse(`${{ steps.filtered_test.outputs.integration_test_modules_json || '[]' }}`);
            
            function toMarkdownList(items) {
              return items.length ? items.map(item => `- \`${item}\``).join('\n') : '_None_';
            }
            
            let summary = `### 🧩 Go Module Discovery Summary\n\n`;
            
            summary += `**🔍 Discovered Modules (${modules.length}):**\n${toMarkdownList(modules)}\n\n`;
            summary += `**🎯 Filtered Modules (${filtered.length}):**\n${toMarkdownList(filtered)}\n\n`;
            summary += `**🧪 Unit Test Modules (${unitTests.length}):**\n${toMarkdownList(unitTests)}\n\n`;
            summary += `**🧬 Integration Test Modules (${integrationTests.length}):**\n${toMarkdownList(integrationTests)}\n`;
            
            core.summary.addRaw(summary).write();

  golangci_lint:
    name: "golangci-lint"
    needs: discover_modules
    runs-on: ubuntu-latest
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow write access to checks to allow the action to annotate code in the PR.
      checks: write
    if: ${{ fromJSON(needs.discover_modules.outputs.modules_json)[0] != null }} # skip if no modules are found
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          sparse-checkout: |
            ${{ matrix.module }}
            .github/config/golangci.yml
            .env
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: '${{ github.workspace }}/${{ matrix.module }}/go.mod'
          cache-dependency-path: '${{ github.workspace }}/${{ matrix.module }}/go.sum'
      - name: Read tool versions
        id: versions
        run: |
          source .env
          echo "golangci_lint=${GOLANGCI_LINT_VERSION}" >> $GITHUB_OUTPUT
      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: v${{ steps.versions.outputs.golangci_lint }}
          working-directory: ${{ github.workspace }}/${{ matrix.module }}
          args: --timeout 10m --config=${{ github.workspace }}/.github/config/golangci.yml

  run_integration_tests:
    name: "Integration Tests"
    needs: discover_modules
    runs-on: large_runner
    if: ${{ fromJSON(needs.discover_modules.outputs.integration_test_modules_json)[0] != null }} # skip if no modules are found
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.integration_test_modules_json) }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TESTCONTAINER_DOCKER_NETWORK: integration-testcontainers
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: '${{ github.workspace }}/${{ matrix.module }}/go.mod'
          cache-dependency-path: '${{ github.workspace }}/${{ matrix.module }}/go.sum'
      - name: Create Docker network for running Testcontainers
        run: docker network create ${{ env.TESTCONTAINER_DOCKER_NETWORK }}
      - name: Run Tests
        run: task ${{ matrix.module }}:test/integration

  run_unit_tests:
    name: "Unit Tests"
    needs: discover_modules
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.discover_modules.outputs.unit_test_modules_json)[0] != null }} # skip if no modules are found
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.unit_test_modules_json) }}
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          sparse-checkout: |
            ${{ matrix.module }}
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: '${{ github.workspace }}/${{ matrix.module }}/go.mod'
          cache-dependency-path: '${{ github.workspace }}/${{ matrix.module }}/go.sum'
      - name: Run Tests
        run: task ${{ matrix.module }}:test

  analyze-go:
    name: "Analyze Go Modules"
    needs: discover_modules
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write
    if: ${{ fromJSON(needs.discover_modules.outputs.modules_json)[0] != null }} # skip if no modules are found
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # we have a self reference here because CodeQL does introspection on the step
          sparse-checkout: |
            .github/workflows/ci.yml
            ${{ matrix.project }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@a4e1a019f5e24960714ff6296aee04b736cbc3cf # v3
        with:
          languages: go
          queries: security-extended
      - name: Autobuild
        uses: github/codeql-action/autobuild@a4e1a019f5e24960714ff6296aee04b736cbc3cf # v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@a4e1a019f5e24960714ff6296aee04b736cbc3cf # v3
        with:
          category: "/language:go"

  generate:
    runs-on: ubuntu-latest
    name: "Code Generation"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go (required by some generators)
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: '1.24.x'
      - name: Run Code Generation
        run: task generate
      - name: Ensure Clean Target Repository
        run: |
          gitStatus="$(git status --porcelain)"
          if [[ -z "${gitStatus}" ]]; then
              exit 0
          fi
          echo "${gitStatus}"
          exit 1

  # failure aggregation job
  # Our CI matrix is dynamic so it cannot be used for required status checks in github.
  # However we can add a failure step that can get triggered if any dependency fails or is cancelled.
  # If this is the case, this job will fail. If CI is successful, the CI Completion Check will be skipped.
  # see https://github.com/orgs/community/discussions/60792 for details on why this is needed
  check-completion:
    name: "Completion"
    runs-on: ubuntu-latest
    needs:
      - discover_modules
      - generate
      - analyze-go
      - run_unit_tests
      - run_integration_tests
      - golangci_lint
    if: failure()
    steps:
      - name: Some CI step failed or was cancelled!
        run: exit 1
