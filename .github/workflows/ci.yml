name: CI

on:
  pull_request:
  push:
    branches:
    - main

env:
  # Check Only Changed Modules
  # If true, only changed modules will be analyzed.
  # If false, all discovered modules will be analyzed.
  check_only_changed: ${{ github.event_name == 'pull_request' }}

jobs:
  discover_modules:
    name: "Discover Go Modules"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      # useful for working directly with modules
      modules_json: ${{ steps.filtered.outputs.modules_json }}
    env:
      DIR: bindings/go
    steps:
      - uses: actions/checkout@v4
      - name: Discover Go Modules
        id: discover
        run: |
          MODULES="$(find ${{ env.DIR }} -name "go.mod" -exec dirname {} \;)"
          MODULES_JSON=$(echo "$MODULES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          FILTERS="$(echo "$MODULES" | jq -rR -s -c 'split("\n") | map(select(. != "")) | map("\(.):\n - \"\(sub("^";""))/**\"") | join ("\n")')"
          
          echo "Detected modules: $MODULES"
          echo "Generated modules JSON: $MODULES_JSON"
          echo "Generated filters: $FILTERS"
          
          echo "modules_json=$MODULES_JSON" >> $GITHUB_OUTPUT 
          
          {
            echo 'filters<<EOF'
            echo "$FILTERS"
            echo EOF
          } >> $GITHUB_ENV
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: ${{ env.filters }}
      - name: Filter JSONs Based on Changes
        id: filtered
        uses: actions/github-script@v7
        env:
          MODULES_JSON: ${{ steps.discover.outputs.modules_json }}
          CHANGE_JSON: ${{ steps.changes.outputs.changes }}
        with:
          script: |
            const modulesJson = JSON.parse(process.env.MODULES_JSON || '[]');
            const changeJson = JSON.parse(process.env.CHANGE_JSON || '[]');
            
            if (process.env.check_only_changed === "true") {
              console.log(`Filtering modules based on changes: ${JSON.stringify(changeJson)}`);
              const filteredModules = modulesJson.filter(module => {
                return changeJson.some(change => change.includes(module));
              });
              console.log(`Filtered modules: ${JSON.stringify(filteredModules)}`);
              core.setOutput("modules_json", JSON.stringify(filteredModules));
            } else {
              console.log("check_only_changed is false, no filtering applied.");
              core.setOutput("modules_json", JSON.stringify(modulesJson));
            }

  golangci_lint:
    name: "golangci-lint"
    needs: discover_modules
    runs-on: ubuntu-latest
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow write access to checks to allow the action to annotate code in the PR.
      checks: write
    if: ${{ fromJSON(needs.discover_modules.outputs.modules_json)[0] != null }} # skip if no modules are found
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version-file: '${{ github.workspace }}/${{ matrix.module }}/go.mod'
      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: ${{ github.workspace }}/${{ matrix.module }}
          args: --timeout 10m --config=${{ github.workspace }}/.github/config/golangci.yml
  run_unit_tests:
    name: "Unit Tests"
    needs: discover_modules
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.discover_modules.outputs.modules_json)[0] != null }} # skip if no modules are found
    strategy:
      matrix:
        module: ${{ fromJSON(needs.discover_modules.outputs.modules_json) }}
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version-file: '${{ github.workspace }}/${{ matrix.module }}/go.mod'
      - name: Run Tests
        run: task ${{ matrix.module }}:test
  analyze-go:
    name: "Analyze Go Modules"
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  generate:
    runs-on: ubuntu-latest
    name: "Code Generation"
    steps:
      - uses: actions/checkout@v4
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go (required by some generators)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Run Code Generation
        run: task generate
      - name: Ensure Clean Target Repository
        run: |
          gitStatus="$(git status --porcelain)"
          if [[ -z "${gitStatus}" ]]; then
              exit 0
          fi
          echo "${gitStatus}"
          exit 1

  # failure aggregation job
  # Our CI matrix is dynamic so it cannot be used for required status checks in github.
  # However we can add a failure step that can get triggered if any dependency fails or is cancelled.
  # If this is the case, this job will fail. If CI is successful, the CI Completion Check will be skipped.
  # see https://github.com/orgs/community/discussions/60792 for details on why this is needed
  check-completion:
    name: "Completion"
    runs-on: ubuntu-latest
    needs:
      - discover_modules
      - generate
      - analyze-go
      - run_unit_tests
      - golangci_lint
    if: failure()
    steps:
      - name: Some CI step failed or was cancelled!
        run: exit 1
