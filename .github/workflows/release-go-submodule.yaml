name: Release Go Submodule

on:
  workflow_dispatch:
    inputs:
      path:
        description: "Relative path to the Go submodule (e.g., module-a)"
        required: true
        type: string
      bump:
        description: "Bump Mode (major, minor, patch, none)"
        required: false
        type: string
        default: "patch"
        options:
          - patch
          - minor
          - major
          - none
      suffix:
        description: "optional suffix for the tag (e.g. alpha1 can lead to v0.0.0-alpha1)"
        required: false
        type: string
      dry_run:
        description: "Perform a dry run without pushing tags"
        required: false
        default: true
        type: boolean

jobs:
  release:
    permissions:
      contents: write
      id-token: write
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Validate path exists
        run: |
          if [ ! -f "${{ inputs.path }}/go.mod" ]; then
            echo "No go.mod found in ${{ inputs.path }}"
            exit 1
          fi

      - name: Get latest tag for submodule
        id: get_tag
        run: |
          path="${{ inputs.path }}"
          suffix=$(basename "${{ inputs.path }}")
          
          # Extract version from suffix using sed so that go modules with mod suffix of major are respected.
          major_version=$(echo "$suffix" | sed -n 's/^v\([0-9][0-9]*\)$/\1/p')
          
          if [ -n "$major_version" ]; then
            tag_path="${path%/v$major_version}"
          else
            tag_path="$path"
          fi
          
          prefix="${tag_path}/v"
          
          latest=$(git tag --list "${prefix}[0-9]*" | sort -V | tail -n1 || echo "")
          echo "Latest tag: $latest"

          if [ -z "$latest" ]; then
            latest_commit=$(git rev-list --max-parents=0 HEAD)  # first commit in history
            if [ -n "$major_version" ]; then
              version="${major_version}.0.0"
            else
              version="0.0.0"
            fi
          else
            latest_commit=$(git rev-list -n 1 "$latest")
            version=${latest#${prefix}}
          fi

          echo "latest_commit=$latest_commit" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Calculate new version
        id: version
        run: |
          version="${{ steps.get_tag.outputs.version }}"
          bump="${{ inputs.bump }}"
          # Strip leading v and everything after the first non-numeric/dot character,
          # e.g. v1.2.3-alpha1 => 1.2.3
          clean_version=$(echo "$version" | sed -E 's/^v//' | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')
          major=$(echo "$clean_version" | cut -d. -f1)
          minor=$(echo "$clean_version" | cut -d. -f2)
          patch=$(echo "$clean_version" | cut -d. -f3)

          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}

          case "$bump" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            none)
              # No change to version
              ;;
            *)
              echo "Invalid bump value: $bump"
              exit 1
              ;;
          esac
          
          path="${{ inputs.path }}"
          
          # Extract version from suffix using sed so that go modules with mod suffix of major are respected.
          suffix=$(basename "${{ inputs.path }}")
          major_version=$(echo "$suffix" | sed -n 's/^v\([0-9][0-9]*\)$/\1/p')
          
          if [ -n "$major_version" ]; then
            tag_path="${path%/v$major_version}"
          else
            tag_path="$path"
          fi

          new_tag="${tag_path}/v${major}.${minor}.${patch}"
          
          if [ -n "${{ inputs.suffix }}" ]; then
            new_tag="${new_tag}-${{ inputs.suffix }}"
          fi
          
          echo "Calculated new tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<41898282+github-actions[bot]@users.noreply.github.com>"

      - name: Create Tag with Changelog
        run: |
          path="${{ github.event.inputs.path }}"
          from="${{ steps.get_tag.outputs.latest_commit }}"
          to=HEAD
          tag="${{ steps.version.outputs.new_tag }}"
          
          changelog=$(git log --pretty=format:"- %s (%h)" "$from".."$to" -- "$path" || echo "No changes")
          
          {
            echo "Release $tag"
            echo ""
            echo "$changelog"
          } > .tagmsg
          
          cat .tagmsg
          
          git tag -a "$tag" -F .tagmsg
          
          rm .tagmsg

      - name: Dry Run
        if: ${{ inputs.dry_run == true }}
        run: echo "Dry run enabled â€“ no tag created or pushed."

      - name: Generate token for Push
        if: ${{ inputs.dry_run == false }}
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2
        with:
          app_id: ${{ secrets.OCMBOT_APP_ID }}
          private_key: ${{ secrets.OCMBOT_PRIV_KEY }}

      - name: Push Tag
        if: ${{ inputs.dry_run == false }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git push origin "${{ steps.version.outputs.new_tag }}" --verbose

